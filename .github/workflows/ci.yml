name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

# Least privilege
permissions:
  contents: read

# Cancel superseded runs on the same ref
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Install Rust (stable + rustfmt)
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6
        with:
          components: rustfmt

      - name: Rust cache
        uses: Swatinem/rust-cache@7939da402645ba29a2df566723491a2c856e8f8a

      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Install Rust (stable + clippy)
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6
        with:
          components: clippy

      - name: Rust cache
        uses: Swatinem/rust-cache@7939da402645ba29a2df566723491a2c856e8f8a

      - name: Run clippy (workspace, all targets/features)
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  test:
    name: Test (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        rust: [ stable, beta, nightly ]
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Install Rust (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921
        with:
          toolchain: ${{ matrix.rust }}

      - name: Rust cache (deps/target)
        uses: Swatinem/rust-cache@7939da402645ba29a2df566723491a2c856e8f8a
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: sccache
        uses: mozilla-actions/sccache-action@d651010b8da762cde178750d8eda7b5febfe147a

      - name: Enable sccache
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache"   >> $GITHUB_ENV

      - name: Cargo check (all targets/features)
        run: cargo check --workspace --all-targets --all-features --locked

      - name: Run tests (workspace, all features)
        run: cargo test --workspace --all-features --verbose --locked

      - name: Run core library tests (explicit)
        run: cargo test -p count_lines_core --verbose --locked

      - name: Run doc tests
        run: cargo test --doc --verbose --locked

  build:
    name: Build Release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6

      - name: Rust cache (release)
        uses: Swatinem/rust-cache@7939da402645ba29a2df566723491a2c856e8f8a
        with:
          key: ${{ matrix.os }}-release

      - name: sccache
        uses: mozilla-actions/sccache-action@d651010b8da762cde178750d8eda7b5febfe147a

      - name: Enable sccache
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache"   >> $GITHUB_ENV

      - name: Build release binary
        run: cargo build --release --workspace --verbose --locked

      - name: Test release binary (Unix)
        if: runner.os != 'Windows'
        run: |
          ./target/release/count_lines --version
          ./target/release/count_lines --top 5 || true

      - name: Test release binary (Windows)
        if: runner.os == 'Windows'
        run: |
          .\target\release\count_lines.exe --version
          .\target\release\count_lines.exe --top 5

      - name: Upload binary artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: count_lines-${{ matrix.os }}
          path: |
            target/release/count_lines*
          if-no-files-found: ignore
          retention-days: 14

  deny:
    name: cargo-deny
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Install Rust
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@ef301417264190a1eb9f26fcf171642070085c5b

  ci-success:
    name: CI Success
    needs: [ fmt, clippy, test, build, deny ]
    runs-on: ubuntu-latest
    steps:
      - name: Success
        run: echo "âœ… All checks passed!"