name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.5.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Changes

            See [CHANGELOG.md](https://github.com/jungamer-64/count_lines/blob/main/docs/CHANGELOG.md) for details.

            ## Downloads

            Download the appropriate binary for your platform below.

            ## Installation

            1. Download the binary for your platform
            2. Extract the archive
            3. Copy the binary to a directory in your PATH
            4. Run `count_lines --version` to verify installation

            For detailed instructions, see the `INSTALL.txt` file in each archive.
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}

  # Build release binaries for multiple platforms
  build-release:
    name: Build Release (${{ matrix.name }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: count_lines-${{ needs.create-release.outputs.version }}-linux-x86_64
          - name: linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: count_lines-${{ needs.create-release.outputs.version }}-linux-aarch64
          - name: macos-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            asset_name: count_lines-${{ needs.create-release.outputs.version }}-macos-x86_64
          - name: macos-aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            asset_name: count_lines-${{ needs.create-release.outputs.version }}-macos-aarch64
          - name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: count_lines-${{ needs.create-release.outputs.version }}-windows-x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Create release directory
        run: mkdir -p release/${{ matrix.asset_name }}

      - name: Copy binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/count_lines release/${{ matrix.asset_name }}/
          chmod +x release/${{ matrix.asset_name }}/count_lines

      - name: Copy binary (Windows)
        if: runner.os == 'Windows'
        run: |
          copy target\${{ matrix.target }}\release\count_lines.exe release\${{ matrix.asset_name }}\

      - name: Copy documentation
        run: |
          cp README.md release/${{ matrix.asset_name }}/ || true
          cp LICENSE-MIT release/${{ matrix.asset_name }}/ || true
          cp LICENSE-APACHE release/${{ matrix.asset_name }}/ || true
          cp -r docs release/${{ matrix.asset_name }}/ || true

      - name: Create installation instructions
        run: |
          cat > release/${{ matrix.asset_name }}/INSTALL.txt << 'EOF'
          count_lines ${{ needs.create-release.outputs.version }}
          Installation Instructions

          1. Copy the binary to a directory in your PATH:

             Linux/macOS:
             sudo cp count_lines /usr/local/bin/

             Or for user installation:
             mkdir -p ~/.local/bin
             cp count_lines ~/.local/bin/
             export PATH="$HOME/.local/bin:$PATH"

             Windows:
             Copy count_lines.exe to a directory in your PATH
             or add the directory containing count_lines.exe to your PATH

          2. Verify installation:

             count_lines --version

          3. View help:

             count_lines --help

          For more information, see README.md or visit:
          https://github.com/jungamer-64/count_lines
          EOF

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        run: |
          cd release
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }}
          sha256sum ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          cd release
          Compress-Archive -Path ${{ matrix.asset_name }} -DestinationPath ${{ matrix.asset_name }}.zip
          Get-FileHash -Algorithm SHA256 ${{ matrix.asset_name }}.zip | Format-List | Out-String | Set-Content ${{ matrix.asset_name }}.zip.sha256

      - name: Upload release asset (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload release asset (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip

      - name: Upload checksum (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ matrix.asset_name }}.tar.gz.sha256
          asset_name: ${{ matrix.asset_name }}.tar.gz.sha256
          asset_content_type: text/plain

      - name: Upload checksum (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ matrix.asset_name }}.zip.sha256
          asset_name: ${{ matrix.asset_name }}.zip.sha256
          asset_content_type: text/plain

  # Publish to crates.io (optional)
  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish core library
        run: cargo publish -p count_lines_core --no-verify

      - name: Wait for core library to be available
        run: sleep 60

      - name: Publish main crate
        run: cargo publish --no-verify
